package sparkStreamingPorg.streams;

import java.util.Arrays;
import java.util.Scanner;
import java.util.regex.Pattern;

import org.apache.spark.SparkConf;
import org.apache.spark.api.java.StorageLevels;
import org.apache.spark.streaming.Durations;
import org.apache.spark.streaming.api.java.JavaDStream;
import org.apache.spark.streaming.api.java.JavaPairDStream;
import org.apache.spark.streaming.api.java.JavaReceiverInputDStream;
import org.apache.spark.streaming.api.java.JavaStreamingContext;

import scala.Tuple2;

public class JavaNetworkWordCount {
	
	private static final Pattern SPACE = Pattern.compile(" ");
	
	public static void main(String[] args) throws Exception {
		
		if (args.length < 2) {
		System.err.println("Usage: JavaNetworkWordCount <localhost> <9999>");
		System.exit(1);
		}
		//StreamingExamples.setStreamingLogLevels();
		// Create the context with a 1 second batch size
		Scanner sc = new Scanner(System.in);
		System.out.println("Enter host name and  port number : ");
		String hostName = sc.nextLine();
		int portnum = sc.nextInt();
		SparkConf sparkConf = new SparkConf().setMaster("local[2]").setAppName("JavaNetworkWordCount");
		JavaStreamingContext ssc = new JavaStreamingContext(sparkConf, Durations.seconds(10));
		//JavaReceiverInputDStream<String> lines = ssc.socketTextStream("localhost", 9999);
		JavaReceiverInputDStream<String> lines = ssc.socketTextStream(hostName, portnum, StorageLevels.MEMORY_AND_DISK_SER);
		JavaDStream<String> words = lines.flatMap(x -> Arrays.asList(SPACE.split(" ")).iterator());
		JavaPairDStream<String, Integer> wordCounts = words.mapToPair(s -> new Tuple2<>(s, 1)).reduceByKey((i1, i2) -> i1 + i2);
		wordCounts.print();
		ssc.start();
		ssc.stop();
		ssc.awaitTermination();
		}
		
}
