package sparkStreamingPorg.streams;

import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.net.ConnectException;
import java.net.Socket;
import java.nio.charset.StandardCharsets;
import java.util.Arrays;

import org.apache.spark.SparkConf;
import org.apache.spark.storage.StorageLevel;
import org.apache.spark.streaming.Duration;
import org.apache.spark.streaming.api.java.JavaDStream;
import org.apache.spark.streaming.api.java.JavaPairDStream;
import org.apache.spark.streaming.api.java.JavaReceiverInputDStream;
import org.apache.spark.streaming.api.java.JavaStreamingContext;
import org.apache.spark.streaming.receiver.Receiver;


import com.google.common.io.Closeables;
import scala.Tuple2;

public class JavaCustomReceiver extends Receiver<String>{
	public static void main(String[] args) throws Exception {
		String hostName = "localhost";
		int protNum = 9999;
		if (hostName.length() < 2) {
		System.err.println("Usage: JavaCustomReceiver <hostname> <port>");
		System.exit(1);
		}
		//StreamingExamples.setStreamingLogLevels();
		// Create the context with a 1 second batch size
		SparkConf sparkConf = new SparkConf().setAppName("JavaCustomReceiver").setMaster("local[2]");
		JavaStreamingContext ssc = new JavaStreamingContext(sparkConf, new Duration(1000));
		// Create an input stream with the custom receiver on target ip:port and count the
		// words in input stream of \n delimited text (eg. generated by 'nc')
		JavaReceiverInputDStream<String> lines = ssc.receiverStream(
		new JavaCustomReceiver(hostName, protNum));
		JavaDStream<String> words = lines.flatMap(x -> Arrays.asList(x.split(" ")).iterator());
		JavaPairDStream<String, Integer> wordCounts = words.mapToPair(s -> new Tuple2<>(s, 1))
		.reduceByKey((i1, i2) -> i1 + i2);
		wordCounts.print();
		ssc.start();
		ssc.awaitTermination();
		}
			String host = null;
			int port = -1;
			public JavaCustomReceiver(String host_ , int port_) {
			super(StorageLevel.MEMORY_AND_DISK_2());
			host = host_;
			port = port_;
			}
			@Override
			public void onStart() {
			// Start the thread that receives data over a connection
			new Thread(this::receive).start();
			}
			@Override
			public void onStop() {
			// There is nothing much to do as the thread calling receive()
			// is designed to stop by itself isStopped() returns false
			}
			
			private void receive() {
				try {
				Socket socket = null;
				BufferedReader reader = null;
				try {
				// connect to the server
				socket = new Socket(host, port);
				reader = new BufferedReader(
				new InputStreamReader(socket.getInputStream(), StandardCharsets.UTF_8));
				// Until stopped or connection broken continue reading
				String userInput;
				while (!isStopped() && (userInput = reader.readLine()) != null) {
				System.out.println("Received data '" + userInput + "'");
				store(userInput);
				}
				} finally {
				Closeables.close(reader, /* swallowIOException = */ true);
				Closeables.close(socket, /* swallowIOException = */ true);
				}
				// Restart in an attempt to connect again when server is active again
				restart("Trying to connect again");
				} catch(ConnectException ce) {
				// restart if could not connect to server
				restart("Could not connect", ce);
				} catch(Throwable t) {
				restart("Error receiving data", t);
				}
			}
}
