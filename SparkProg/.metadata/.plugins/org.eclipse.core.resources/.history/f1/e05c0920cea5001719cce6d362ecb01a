package sparkStreamingPorg.streams;

import java.util.Arrays;
import java.util.List;

import org.apache.spark.api.java.JavaSparkContext;
import org.apache.spark.broadcast.Broadcast;
import org.apache.spark.util.LongAccumulator;

class JavaWordBlacklist {
	private static volatile Broadcast<List<String>> instance = null;
	public static Broadcast<List<String>> getInstance(JavaSparkContext jsc) {
		if (instance == null) {
			synchronized (JavaWordBlacklist.class) {
				if (instance == null) {
					List<String> wordBlacklist = Arrays.asList("a", "b", "c");
					instance = jsc.broadcast(wordBlacklist);
				}
			}
		}
			return instance;
	}
}

class JavaDroppedWordsCounter {
	private static volatile LongAccumulator instance = null;
	public static LongAccumulator getInstance(JavaSparkContext jsc) {
		if (instance == null) {
			synchronized (JavaDroppedWordsCounter.class) {
				if (instance == null) {
					instance = jsc.sc().longAccumulator("WordsInBlacklistCounter");
				}
			}
	}
return instance;
}
}
public class JavaRecoverableNetworkWordCount {
	
}
